#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <string.h>

struct ContBancar
{
	char* numeClient;
	float sold;
	char* valuta_cont;
};

void afisare(ContBancar* c)
{
    printf("Nume Client = %s, Sold = %f, Valuta Cont = %s\n",
        c->numeClient,
        c->sold,
        c->valuta_cont);
}

struct nodLs
{
    ContBancar info;
    nodLs* next;
};

struct hashT
{
    nodLs** conturi;
    int size;
};

int functieHash(const char* cod, hashT tabela) //dimensiunea tabelei va fi 255
{
    return cod[0] % tabela.size;
}

int inserare(hashT tabela, ContBancar c)
{
    int pozitie;
    if (tabela.conturi != NULL)
    {
        pozitie = functieHash(c.numeClient, tabela);
        nodLs* nou = (nodLs*)malloc(sizeof(nodLs));

        nou->info.numeClient =  (char*)malloc(sizeof(char) * (strlen(c.numeClient) + 1));
        strcpy(nou->info.numeClient, c.numeClient);

        nou->info.sold = c.sold;

        nou->info.valuta_cont = (char*)malloc(sizeof(char) * (strlen(c.valuta_cont) + 1));
        strcpy(nou->info.valuta_cont, c.valuta_cont);

        nou->next = NULL;
        if (tabela.conturi[pozitie] == NULL)
        {
            tabela.conturi[pozitie] = nou;
        }
        else
        {
            nodLs* temp = tabela.conturi[pozitie];
            while (temp->next)
                temp = temp->next;
            temp->next = nou;
        }
    }
    return pozitie;
}






hashT citireDinFisier(FILE* f)
{
    hashT tabela;
    tabela.size = 255;
    tabela.conturi = (nodLs**)malloc(tabela.size * sizeof(nodLs*));
    for (int i = 0; i < tabela.size; i++)
    {
        tabela.conturi[i] = NULL;
    }
    char buffer[100];
    int dimensiune = 0;
    fscanf(f, "%d", &dimensiune);
    fgets(buffer, 100, f);

    for (int i = 0; i < dimensiune; i++)
    {
        ContBancar c;
        fgets(buffer, 100, f);

        strtok(buffer, ",");
        c.numeClient = (char*)malloc(sizeof(char) * (strlen(buffer) + 1));
        strcpy(c.numeClient, buffer);


        strcpy(buffer, strtok(NULL, ","));
        c.sold = atof(buffer);;

        strcpy(buffer, strtok(NULL, ","));
        strtok(buffer, "\n");
        c.valuta_cont = (char*)malloc(sizeof(char) * (strlen(buffer) + 1));
        strcpy(c.valuta_cont, buffer);


        inserare(tabela, c);
    }


    return tabela;

}



void traversare(hashT tabela)
{
    if (tabela.conturi != NULL)
    {
        printf("\n");
        for (int i = 0; i < tabela.size; i++)
        {
            if (tabela.conturi[i] != NULL)
            {
                nodLs* temp = tabela.conturi[i];
                while (temp)
                {
                    printf("Pozitia %d ", i);
                    afisare(&temp->info);
                    temp = temp->next;
                }
            }
        }
    }


}

int stergere(hashT tabela, const char* cod)
{
    int pozitie;
    if (tabela.conturi != NULL)
    {
        pozitie = functieHash(cod, tabela);
        if (tabela.conturi[pozitie] == NULL)
        {
            return -1;
        }
        else
        {
            if (strcmp(tabela.conturi[pozitie]->info.numeClient, cod) == 0)
            {
                if (tabela.conturi[pozitie]->next == NULL)
                {
                    nodLs* temp = tabela.conturi[pozitie];
                    free(temp->info.numeClient);
                    free(temp->info.valuta_cont);
                    free(temp);
                    tabela.conturi[pozitie] = NULL;
                }
                else
                {
                    nodLs* temp = tabela.conturi[pozitie];
                    tabela.conturi[pozitie] = temp->next;
                    free(temp->info.numeClient);
                    free(temp->info.valuta_cont);
                    free(temp);
                }
            }
            else
            {
                nodLs* temp = tabela.conturi[pozitie];
                while (temp->next != NULL && strcmp(temp->next->info.numeClient,cod) != 0)
                    temp = temp->next;
                nodLs* p = temp->next;
                if (p->next != NULL)
                {
                    temp->next = p->next;
                    free(p->info.numeClient);
                    free(p->info.valuta_cont);
                    free(p);
                }
                else
                {
                    temp->next = NULL;
                    free(p->info.numeClient);
                    free(p->info.valuta_cont);
                    free(p);
                }
            }
        }
    }
    return pozitie;
}

void dezalocare(hashT tabela)
{
    if (tabela.conturi != NULL)
    {
        for (int i = 0; i < tabela.size; i++)
        {
            if (tabela.conturi[i] != NULL)
            {
                nodLs* temp = tabela.conturi[i];
                while (temp)
                {
                    nodLs* temp2 = temp->next;
                    free(temp->info.numeClient);
                    free(temp->info.valuta_cont);
                    free(temp);
                    temp = temp2;
                }
            }
            
        }
        free(tabela.conturi);
    }
}

void main()
{

	FILE* f;
	f = fopen("Text.txt", "r");

    hashT tabela;
    tabela.size = 255;
    
    tabela = citireDinFisier(f);

    traversare(tabela);

    stergere(tabela, "Dio");

    traversare(tabela);




    fclose(f);
    dezalocare(tabela);
    printf("Dezalocarea a fost un succes");


}