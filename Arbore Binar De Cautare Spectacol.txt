#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <string.h>

//timp de incepere 7

struct Spectacol
{
	int idSpectacol;
	float pretBilet;
	char* numeClient;
	char dataSustinere[10];
	float inaltimeClient;
	int varstaClient;
};

void afisareSpectacol(Spectacol* s)
{
	printf("ID = %d, Pret Bilet = %f, Nume Client = %s, Data = %s, inaltime = %f, varsta = %d\n",
		s->idSpectacol,
		s->pretBilet,
		s->numeClient,
		s->dataSustinere,
		s->inaltimeClient,
		s->varstaClient);
}

struct nodArb
{
	Spectacol* info;
	nodArb* left;
	nodArb* right;
};



nodArb* adaugareNod(nodArb* rad, Spectacol* s)
{
	if (rad)
	{
		if (rad->info->idSpectacol > s->idSpectacol)
		{
			rad->left = adaugareNod(rad->left, s);
		}
		else
		{
			rad->right = adaugareNod(rad->right, s);
		}
		return rad;

	}
	else
	{
		nodArb* nou = (nodArb*)malloc(sizeof(nodArb));
		nou->info = s;
		nou->left = NULL;
		nou->right = NULL;

		return nou;
	}
}

//void transversareP

nodArb* citireDinFisier(FILE* f)
{
	nodArb* rad = NULL;
	char buffer[100];
	int dimensiune = 0;
	fscanf(f, "%d", &dimensiune);
	fgets(buffer, 100, f);
	for (int i = 0; i < dimensiune; i++)
	{
		Spectacol* s = (Spectacol*)malloc(sizeof(Spectacol));
		fgets(buffer, 100, f);

		strtok(buffer, ",");
		s->idSpectacol = atoi(buffer);

		strcpy(buffer, strtok(NULL, ","));
		s->pretBilet = atof(buffer);

		strcpy(buffer, strtok(NULL, ","));
		s->numeClient = (char*)malloc(sizeof(char) * (strlen(buffer) + 1));
		strcpy(s->numeClient, buffer);

		strcpy(buffer, strtok(NULL, ","));
		strcpy(s->dataSustinere, buffer);

		strcpy(buffer, strtok(NULL, ","));
		s->inaltimeClient = atof(buffer);

		strcpy(buffer, strtok(NULL, ","));
		s->varstaClient = atoi(buffer);

		rad = adaugareNod(rad, s);
	}

	return rad;
}

void afisarePreOrdine(nodArb* rad)
{
	if (rad)
	{
		nodArb* temp = rad;
		afisareSpectacol(rad->info);
		afisarePreOrdine(rad->left);
		afisarePreOrdine(rad->right);


	}
}

void calculareDimensiuneArbore(nodArb* rad, int* count)
{
	if (rad)
	{
		nodArb* temp = rad;
		(*count)++;
		calculareDimensiuneArbore(rad->left, count);
		calculareDimensiuneArbore(rad->right, count);


	}

}

void calculDupaData(nodArb* rad, int* count, Spectacol s[], const char* data)
{
	if (rad)
	{
			if (strcmp(rad->info->dataSustinere, data) == 0)
			{
				Spectacol spec;

				spec.idSpectacol = rad->info->idSpectacol;

				spec.pretBilet = rad->info->pretBilet;

				spec.numeClient = (char*)malloc(sizeof(char) * (strlen(rad->info->numeClient) + 1));
				strcpy(spec.numeClient, rad->info->numeClient);

				strcpy(spec.dataSustinere, rad->info->dataSustinere);

				spec.inaltimeClient = rad->info->inaltimeClient;

				spec.varstaClient = rad->info->varstaClient;

				s[*count] = spec;




				(*count)++;
			}


			calculDupaData(rad->left, count, s, data);
			calculDupaData(rad->right, count, s, data);

	}
}

struct valori {
	char* nume;
	float costTotal;
};

void afisareValoare(valori* v)
{
	printf("Nume = %s, Cost Total = %f\n",
		v->nume,
		v->costTotal);

}

void calculareCostTotal(nodArb* rad, int* count, valori v[])
{
	if (rad)
	{
		int gasit = 0;
		if (*count > 0)
		{
			for (int i = 0; i < *count; i++)
			{
				if (v[i].nume)
				{
					if (strcmp(rad->info->numeClient, v[i].nume) == 0)
					{
						v[i].costTotal += rad->info->pretBilet;
						gasit = 1;
					}
				}
			}
		}
		if (gasit != 1)
		{
			valori vvv;
			vvv.nume = (char*)malloc(sizeof(char) * (strlen(rad->info->numeClient) + 1));
			strcpy(vvv.nume, rad->info->numeClient);

			vvv.costTotal = rad->info->pretBilet;

			v[*count] = vvv;

			(*count)++;
		}





		calculareCostTotal(rad->left, count, v);
		calculareCostTotal(rad->right, count, v);
	}
}

// regula e daca un nod e mai mare sau mai mic de 15
void conversie(nodArb* rad, nodArb** ABC1, nodArb** ABC2)
{
	if (rad)
	{
		if (rad->info->varstaClient >= 18)
		{
			*ABC1 = adaugareNod(*ABC1, rad->info);
		}
		else
		{
			*ABC2 = adaugareNod(*ABC2, rad->info);
		}


		conversie(rad->left, ABC1, ABC2);
		conversie(rad->right, ABC1, ABC2);
	}

}

void main()
{
	FILE* f;
	f = fopen("Text.txt", "r");

	nodArb* rad = NULL;
	rad = citireDinFisier(f);

	afisarePreOrdine(rad);

	int count = 0;
	calculareDimensiuneArbore(rad, &count);
	printf("In arbore sunt %d noduri\n", count);

	Spectacol* lista = (Spectacol*)malloc(sizeof(Spectacol) * count);
	count = 0;
	calculDupaData(rad, &count, lista, "10-11-20");
	for (int i = 0; i < count; i++)
	{
		afisareSpectacol(&lista[i]);
	}

	count = 0;
	calculareDimensiuneArbore(rad, &count);
	valori* listaValori = (valori*)malloc(sizeof(valori) * count);

	count = 0;
	printf("\nAfisare\n");
	afisarePreOrdine(rad);
	printf("\nAfisare\n");
	calculareCostTotal(rad, &count, listaValori);
	for (int i = 0; i < count; i++)
	{
		afisareValoare(&listaValori[i]);
	}


	nodArb* ABC1 = NULL;
	nodArb* ABC2 = NULL;

	conversie(rad, &ABC1, &ABC2);

	printf("\nArbore 1\n");

	afisarePreOrdine(ABC1);

	printf("\nArbore 2\n");

	afisarePreOrdine(ABC2);

	fclose(f);


}