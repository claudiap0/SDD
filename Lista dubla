#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <malloc.h>
#include <string.h>
#include <stdlib.h>


struct perioada_sejur
{
	char data_inceput[11];
	char data_sfarsit[11];
};

// functie care returneaza o perioada sejur
perioada_sejur crearePerioada(const char* data_inceput, const char* data_final)
{
	//perioada_sejur* p = NULL;                                 sau se poate returna un o adresa de perioada_sejur
	//p = (perioada_sejur*)malloc(sizeof(perioada_sejur));        


	perioada_sejur p;
	strcpy(p.data_inceput, data_inceput);
	strcpy(p.data_sfarsit, data_final);


	return p;
}


struct SejurTuristic
{
	char* destinatie;
	float suma_plata;
	perioada_sejur perioada;

	// ar mai trebui inca 4 campuri la alegere dar nu sunt la examen si doar lucrez

};

// functie creare sejur turistic care returneaza care returneaza o adresa la un sejurTuristic
SejurTuristic* creareSejur(const char* destinatie, float sumaDePlata, perioada_sejur perioadaP)
{
	SejurTuristic* st = NULL;
	st = (SejurTuristic*)malloc(sizeof(SejurTuristic));

	st->destinatie = (char*)malloc(sizeof(char) * (strlen(destinatie) + 1));
	strcpy(st->destinatie, destinatie);

	st->suma_plata = sumaDePlata;

	st->perioada = perioadaP;


	return st;
}

void afisareSejur(SejurTuristic* s)
{
	printf("Destinatie = %s, Suma de platit = %f, Data Sosire = %s, Data Plecare = %s\n",
		s->destinatie,
		s->suma_plata,
		s->perioada.data_inceput,
		s->perioada.data_sfarsit);
}

struct nodListDubla
{
	SejurTuristic* info;
	nodListDubla* next;
	nodListDubla* prev;
};

struct listaDubla
{
	nodListDubla* start;
	nodListDubla* finish;
};

// functie de crearea a unui nod din lista ce va fi folosit in functia de creare a listei
nodListDubla* creareNodListaDubla(SejurTuristic* stp, nodListDubla* prev, nodListDubla* next)
{
	nodListDubla* node = (nodListDubla*)malloc(sizeof(nodListDubla));
	node->info = creareSejur(stp->destinatie, stp->suma_plata, stp->perioada);
	node->prev = prev;
	node->next = next;


	return node;
}

// functie de creare a listei
listaDubla* creareListaDubla(SejurTuristic* stp, listaDubla* lista)
{
	//in cazul in care lista nu exista nici primul element si ultimul nu vor exista ceea ce inseamna  ca functie de creare nu va functiona
	if (!lista) {
		lista = (listaDubla*)malloc(sizeof(listaDubla));
		lista->start = NULL;
		lista->finish = NULL;
	}
	nodListDubla* nou = creareNodListaDubla(stp, NULL, lista->start); // inserare la inceput
	if (lista->start)
	{
		lista->start->prev = nou;
		lista->start = nou;

		return lista;
	}
	else
	{

		lista->start = nou;
		lista->finish = nou;

		return lista;
	}
}

listaDubla* citireDinFisier(FILE* f, listaDubla* lista) // sau poutem crea in interiorul functie o lista care o sa o dam ca parametru
// works both ways
{
	char buffer[50];
	int dimensiune = 0;
	fscanf(f, "%d", &dimensiune);
	fgets(buffer, 50, f);

	for (int i = 0; i < dimensiune; i++)
	{
		SejurTuristic st;                       // un exemplu fara a folosit functia de creare a unui sejur

		fgets(buffer, 50, f);
		strtok(buffer, "\n"); // fgetts citeste si \n si trebuie scos din buffer dar daca nu ai nevoie de de cele 0.25 poti 
		//face si un exemplu sa cistesti fara spatiu

		st.destinatie = (char*)malloc(sizeof(char) * strlen(buffer) + 1);
		strcpy(st.destinatie, buffer);

		fscanf(f, "%f", &st.suma_plata);

		fscanf(f, "%s", &st.perioada.data_inceput);
		fscanf(f, "%s", &st.perioada.data_sfarsit);

		lista = creareListaDubla(&st, lista);

		fgets(buffer, 50, f);

	}

	return lista;

}


void afisareListaStart(listaDubla* lista)
{
	if (!lista)
	{
		return;
	}
	if (lista->start)
	{
		printf("\n Afisare de la inceput la final \n");
		nodListDubla* temp = lista->start;
		while (temp)
		{
			afisareSejur(temp->info);
			temp = temp->next;
		}
	}
	else
	{
		printf("Lista nu exista!\n");
	}
}

void afisareListaFinal(listaDubla* lista)
{
	if (!lista)
	{
		return;
	}
	if (lista->finish)
	{
		printf("\n Afisare de la final la inceput \n");
		nodListDubla* temp = lista->finish;
		while (temp)
		{
			afisareSejur(temp->info);
			temp = temp->prev;
		}
	}
	else
	{
		printf("Lista nu exista!\n");
	}
}

int calculareTimpRezervare(perioada_sejur data)
{
	int valoare = 0;

	// calculare data in int a perioadei de inceput
	int an = 1;
	int luna = 1;
	int zi = 1;
	char buffer[50];
	strcpy(buffer, strtok(data.data_inceput, "-"));
	zi = atoi(buffer);
	strcpy(buffer, strtok(NULL, "-"));
	luna = atoi(buffer);
	strcpy(buffer, strtok(NULL, "-"));
	an = atoi(buffer);

	// calculare data in int a perioadei de sfarsit
	int an2 = 1;
	int luna2 = 1;
	int zi2 = 1;
	strcpy(buffer, strtok(data.data_sfarsit, "-"));
	zi2 = atoi(buffer);
	strcpy(buffer, strtok(NULL, "-"));
	luna2 = atoi(buffer);
	strcpy(buffer, strtok(NULL, "-"));
	an2 = atoi(buffer);

	if (an == an2)
	{
		if (luna == luna2)
		{
			if (zi == zi2)
			{
				return valoare;
			}
			valoare += zi2 - zi;
			return valoare;
		}
		else
		{
			valoare += (luna2 - luna) * 30;
			if (zi > zi2)
			{
				valoare += (zi - 30) + zi2;
			}
			return valoare;
		}

	}

	return -1;
}

perioada_sejur* calculareSejururiSapte(listaDubla* lista, int* numar)
{
	perioada_sejur* listaPerioade = NULL;
	int count = 0;
	nodListDubla* temp = lista->start;
	while (temp)
	{
		if (calculareTimpRezervare(temp->info->perioada) == 7)
		{
			if (listaPerioade)
			{
				perioada_sejur* tempLista = listaPerioade;
				listaPerioade = (perioada_sejur*)malloc(sizeof(perioada_sejur) * (count + 1));
				for (int i = 0; i < count; i++)
				{
					listaPerioade[i] = tempLista[i];
				}
				free(tempLista);
			}
			else
				listaPerioade = (perioada_sejur*)malloc(sizeof(perioada_sejur) * (count + 1));
			perioada_sejur ps;
			strcpy(ps.data_inceput, temp->info->perioada.data_inceput);
			strcpy(ps.data_sfarsit, temp->info->perioada.data_sfarsit);

			listaPerioade[count] = ps;

			count++;
		}
		temp = temp->next;
	}

	*numar = count;
	return listaPerioade;
}

struct nodListaPrincipala
{
	char* destinatie;
	listaDubla* lista;
	nodListaPrincipala* next;
};

nodListaPrincipala* adaugareLista(nodListaPrincipala* rad, listaDubla* lista)
{
	if (rad)
	{
		nodListaPrincipala* temp = rad;
		while (temp->next)
			temp = temp->next;
			

		nodListaPrincipala* aux = (nodListaPrincipala*)malloc(sizeof(nodListaPrincipala));
		aux->destinatie = (char*)malloc(sizeof(char) * (strlen(lista->start->info->destinatie) + 1));
		strcpy(aux->destinatie, lista->start->info->destinatie);
		aux->lista = lista;
		aux->next = NULL;

		temp->next = aux;

		return rad;
	}
	else
	{
		nodListaPrincipala* aux = (nodListaPrincipala*)malloc(sizeof(nodListaPrincipala));
		aux->destinatie = (char*)malloc(sizeof(char) * (strlen(lista->start->info->destinatie) + 1));
		strcpy(aux->destinatie, lista->start->info->destinatie);
		aux->lista = lista;
		aux->next = NULL;


		return aux;
	}
}

void main()
{
	perioada_sejur ps = crearePerioada("11-10-2020", "11-11-2020");
	SejurTuristic* st = creareSejur("Bucegi", 11, ps);
	nodListDubla* nod1 = NULL;
	nod1 = creareNodListaDubla(st, NULL, NULL);
	
	// afisare sejur si nod lista
	afisareSejur(st);
	free(st);
	afisareSejur(nod1->info);
	nod1->info->suma_plata = 0;
	afisareSejur(nod1->info);


	listaDubla* lista = NULL;
	lista = creareListaDubla(nod1->info, lista);
	printf("\nasdasd\n");
	afisareSejur(lista->start->info);

	// citire din fisier
	FILE* f;

	f = fopen("Paducel.txt", "r");

	lista = citireDinFisier(f, lista);

	afisareListaStart(lista);
	afisareListaFinal(lista);

	printf("\nDistanta dintre zile este %d\n", calculareTimpRezervare(lista->finish->prev->info->perioada));

	int numarPerioade = 0;
	perioada_sejur* listaSejururi = calculareSejururiSapte(lista, &numarPerioade);
	printf("\n Sunt %d perioade \n", numarPerioade);
	for (int i = 0; i < numarPerioade; i++)
	{
		printf("\n Inceput %s si final %s \n", listaSejururi[i].data_inceput, listaSejururi[i].data_sfarsit);
	}

	nodListaPrincipala* listaListe = NULL;
	listaListe = adaugareLista(listaListe, lista);
	listaListe = adaugareLista(listaListe, lista);
	listaListe = adaugareLista(listaListe, lista);
	listaListe = adaugareLista(listaListe, lista);

	fclose(f);

}
