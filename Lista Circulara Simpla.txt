#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <malloc.h>
#include <string.h>

struct Informatie
{

	char* stringInfo;
	int intInfo;
};

struct NodListaSimpla
{
	Informatie* inf;
	NodListaSimpla* next;

};

Informatie* creareOInformatie(const char* parString, int parInt)
{
	Informatie* temp = (Informatie*)malloc(sizeof(Informatie));
	temp->stringInfo = (char*)malloc(sizeof(char) * (strlen(parString) + 1));
	strcpy(temp->stringInfo, parString);
	temp->intInfo = parInt;


	return temp;
}

void afisareInformatie(Informatie* i)
{
	printf("String-ul este %s si numarul este %d\n", i->stringInfo, i->intInfo);
}

NodListaSimpla* creareNod(NodListaSimpla* rad, Informatie* i)
{
	if (rad)
	{
		NodListaSimpla* temp = rad;
		NodListaSimpla* prev = (NodListaSimpla*)malloc(sizeof(NodListaSimpla));

		while (temp->next && temp->next != rad)
		{
			temp = temp->next;
		}

		prev->inf = (Informatie*)malloc(sizeof(Informatie));
		prev->inf = creareOInformatie(i->stringInfo, i->intInfo);

		temp->next = prev;
		prev->next = rad;



		return rad;


	}
	else
	{
		NodListaSimpla* temp = (NodListaSimpla*)malloc(sizeof(NodListaSimpla));
		Informatie* tempInf = NULL;


		tempInf = creareOInformatie(i->stringInfo, i->intInfo);

		temp->inf = (Informatie*)malloc(sizeof(Informatie));
		temp->inf = tempInf;
		temp->next = NULL;

		return temp;




	}


}

void parcurgererListaCirculara(NodListaSimpla* rad, int deCateOri)
{
	NodListaSimpla* temp = rad;
	for (int i = 0; i < deCateOri; i++)
	{
		afisareInformatie(temp->inf);
		temp = temp->next;
		while (temp != rad)
		{
			afisareInformatie(temp->inf);
			temp = temp->next;
		}
	}

}






NodListaSimpla* citireDinFisier(FILE* f)
{
	NodListaSimpla* rad = NULL;

	char buffer[50];
	int dimensiune = 0;
	fscanf(f, "%d", &dimensiune);
	fgets(buffer, 50, f);
	for (int i = 0; i < dimensiune; i++)
	{
		Informatie* informatie;
		fgets(buffer, 50, f);
		strtok(buffer, "\n");
		int numar = 0;
		fscanf(f, "%d", &numar);


		informatie = creareOInformatie(buffer, numar);
		
		rad = creareNod(rad, informatie);

		free(informatie);

		fgets(buffer, 50, f);

		
	}

	return rad;

}





void main()
{
	FILE* f;
	f = fopen("FisierCircularSimplu.txt", "r");

	NodListaSimpla* rad = NULL;
	rad = citireDinFisier(f);
	parcurgererListaCirculara(rad, 2);
	
	fclose(f);

}