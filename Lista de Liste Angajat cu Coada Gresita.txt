# define _CRT_SECURE_NO_WARNINGS

// start 11:15

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>

struct Angajat
{
	unsigned int cod_departament;
	char* numeAngajat;

};

void afisareAngajat(Angajat a)
{
	printf("Departament = %d, Nume = %s\n", a.cod_departament, a.numeAngajat);
}

struct nodLS
{
	Angajat info;
	nodLS* prev;
	nodLS* next;

};

nodLS* creareNodLS(Angajat a, nodLS* prev, nodLS* next)
{
	nodLS* nou = (nodLS*)malloc(sizeof(nodLS));
	nou->info.cod_departament = a.cod_departament;
	
	nou->info.numeAngajat = (char*)malloc(sizeof(char) * (strlen(a.numeAngajat) + 1));
	strcpy(nou->info.numeAngajat, a.numeAngajat);
	
	nou->prev = prev;
	nou->next = next;

	return nou;
}

struct listaDubla
{
	nodLS* start;
	nodLS* finish;
};

listaDubla* creareListaDubla(Angajat a, listaDubla* lista)
{
	if (!lista)
	{
		lista = (listaDubla*)malloc(sizeof(listaDubla));
		lista->start = NULL;
		lista->finish = NULL;
	}
	nodLS* nou = creareNodLS(a, NULL, lista->start);
	//nodLS* nou = creareNodLS(a, lista->finish, lista->start); // pentru lista dubla circulara 
	if (lista->start)
	{
		lista->start->prev = nou;
		lista->start = nou;

		//lista->finish->next = nou; // pentru lista dubla circulara
		return lista;
	}
	else
	{
		lista->start = nou;
		lista->finish = nou;
	}

}

void afisareLPInceput(listaDubla* lista)
{
	nodLS* temp = lista->start;
	while (temp)
	{
		afisareAngajat(temp->info);
		temp = temp->next;
	}
}

struct nodLP
{
	listaDubla* lista;
	nodLP* next;
};

nodLP* creareListaListe(nodLP* listaDeListe, listaDubla* lista)
{
	if (listaDeListe)
	{
		nodLP* temp = listaDeListe;
		while (temp->next)
			temp = temp->next;
		
		temp->next = (nodLP*)malloc(sizeof(nodLP));
		temp->next->lista = lista;
		temp->next->next = NULL;

		return listaDeListe;
	}
	else
	{
		listaDeListe = (nodLP*)malloc(sizeof(nodLP));

		listaDeListe->lista = lista;
		listaDeListe->next = NULL;
	}
	
	return listaDeListe;
}

listaDubla* citireDinFisier(FILE* f)
{
	listaDubla* lista = NULL;
	char buffer[50];
	int dimensiune = 0;
	fscanf(f, "%d", &dimensiune);
	fgets(buffer, 50, f);

	for (int i = 0; i < dimensiune; i++)
	{
		Angajat a;

		fgets(buffer, 50, f);
		strtok(buffer, ",");

		a.cod_departament = atoi(buffer);

		strcpy(buffer, strtok(NULL, ","));
		strtok(buffer, "\n");

		a.numeAngajat = (char*)malloc(sizeof(char) * (strlen(buffer) + 1));
		strcpy(a.numeAngajat, buffer);

		lista = creareListaDubla(a, lista);

		

	}

	return lista;

}

void traversareListaDeListe(nodLP* ldl)
{
	int count = 1;
	nodLP* temp = ldl;
	while (temp)
	{
		printf("\n Lista %d\n", count);
		afisareLPInceput(temp->lista);
		temp = temp->next;
		count++;
	}
}

struct nodCoada
{
	Angajat inf;
	nodCoada* next;
};

nodCoada* put(Angajat a, nodCoada* coada)
{
	if (coada)
	{
		nodCoada* temp;


		temp = (nodCoada*)malloc(sizeof(nodCoada));
		temp->inf.cod_departament = a.cod_departament;
		
		temp->inf.numeAngajat = (char*)malloc(sizeof(char) * (strlen(a.numeAngajat) + 1));
		strcpy(temp->inf.numeAngajat, a.numeAngajat);

		temp->next = coada;

		return temp;
	}
	else
	{
		coada = (nodCoada*)malloc(sizeof(nodCoada));

		coada->inf = a;
		coada->next = NULL;
	}


	return coada;
}

Angajat get(nodCoada* coada)
{
	Angajat a;
	nodCoada* temp = coada;
	while (temp->next->next)
		temp = temp->next;

	a.cod_departament = temp->next->inf.cod_departament;

	a.numeAngajat = (char*)malloc(sizeof(char) * (strlen(temp->next->inf.numeAngajat) + 1));
	strcpy(a.numeAngajat, temp->next->inf.numeAngajat);
	


	free(temp->next->inf.numeAngajat);
	free(temp->next);
	temp->next = NULL;

	return a;
}

nodCoada* convert(nodLP* lista, nodCoada* coada, int cod_departament)
{
	nodLP* temp = lista;
	while (temp)
	{

		nodLS* temp2 = temp->lista->start;
		while (temp2)
		{
			if(temp2->info.cod_departament == cod_departament)
				coada = put(temp2->info, coada);
			temp2 = temp2->next;
		}
		temp = temp->next;
	}
	return coada;
}

void transversareCoada(nodCoada* coada)
{
	nodCoada* temp = coada;
	printf("\n AFISARE CONTINUT COADA \n");
	while (temp)
	{
		afisareAngajat(temp->inf);
		temp = temp->next;
		
	}
}

void main()
{
	FILE* f;
	f = fopen("AngajatiPaducel.txt", "r");

	listaDubla* lista = NULL;
	lista = citireDinFisier(f);
	afisareLPInceput(lista);

	nodLP* listaDeListe = NULL;
	listaDeListe = creareListaListe(listaDeListe ,lista);
	listaDeListe = creareListaListe(listaDeListe, lista);
	listaDeListe = creareListaListe(listaDeListe, lista);

	traversareListaDeListe(listaDeListe);

	nodCoada* coada = NULL;
	coada = convert(listaDeListe, coada, 2);

	transversareCoada(coada);

	Angajat a;
	a = get(coada);
	printf("\n Angajatul extras este \n");
	afisareAngajat(a);

	printf("\n Dupa Extragere \n");
	transversareCoada(coada);
	fclose(f);


	printf("\nIncheiat");
}